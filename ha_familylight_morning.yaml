blueprint:
  name: Family Light â€” Orange Hour (15%), then Red (1%) & Off (with settle delay)
  description: >
    At a set time, change light.family_light from red (1%) to orange (15%) for the duration.
    After the duration, set it back to red (1%), wait a short settle delay, then turn it off.
  domain: automation
  input:
    start_time:
      name: Start time
      selector:
        time: {}

    duration:
      name: Orange duration
      description: How long to stay orange before returning to red and turning off
      default: 01:00:00
      selector:
        duration: {}

    brightness_orange_pct:
      name: Orange brightness (%)
      description: Brightness while orange
      default: 15
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
          mode: slider

    brightness_red_pct:
      name: Red brightness (%)
      description: Brightness while red (before/after)
      default: 1
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
          mode: slider

    transition_secs:
      name: Transition (seconds)
      description: Fade time for color/turn off
      default: 1
      selector:
        number:
          min: 0
          max: 10
          step: 1
          unit_of_measurement: s
          mode: slider

    post_red_settle_secs:
      name: Settle delay after returning to red (seconds)
      description: Wait this long after switching back to red before turning off
      default: 3
      selector:
        number:
          min: 0
          max: 30
          step: 1
          unit_of_measurement: s
          mode: slider

mode: restart

trigger:
  - platform: time
    at: !input start_time

condition: []

action:
  # Switch to Orange @ specified brightness
  - service: light.turn_on
    target:
      entity_id: light.family_light
    data:
      hs_color: [30, 100]   # orange
      brightness_pct: !input brightness_orange_pct
      transition: !input transition_secs

  - delay: !input duration

  # Back to Red @ specified brightness
  - service: light.turn_on
    target:
      entity_id: light.family_light
    data:
      hs_color: [0, 100]    # red
      brightness_pct: !input brightness_red_pct
      transition: !input transition_secs

  # Ensure state/brightness is applied before turning off
  - delay:
      seconds: !input post_red_settle_secs

  # Then off
  - service: light.turn_off
    target:
      entity_id: light.family_light
    data:
      transition: !input transition_secs
